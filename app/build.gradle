/*
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

apply plugin: 'com.android.application'
apply plugin: 'com.google.protobuf'
apply plugin: 'realm-android'

ext {
    supportLibraryVersion = '25.4.0'
    grpcVersion = '1.6.0'
}

android {
    compileSdkVersion 25
    buildToolsVersion '25.0.3'
    dataBinding {
        enabled = true
    }
    defaultConfig {
        applicationId "com.google.cloud.android.speech"
        targetSdkVersion 25
        versionCode 1
        versionName '1.0'
        multiDexEnabled true
    }

    signingConfigs {
        release {
            storeFile file(project.properties.storeFile)
            storePassword project.properties.storePassword
            keyAlias project.properties.keyAlias
            keyPassword project.properties.keyPassword
        }
    }

    productFlavors {
        dev {
            // Minimum version with platform multi-dex support
            minSdkVersion 21
        }
        prod {
            // Minimum version that can run gRPC (TLS extension)
            minSdkVersion 16
        }
    }

    buildTypes {
        debug {
            minifyEnabled false
            multiDexEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
    }

    configurations.all {
        resolutionStrategy.force 'com.google.code.findbugs:jsr305:3.0.2'
        resolutionStrategy.force "com.android.support:support-annotations:$supportLibraryVersion"
    }

//    packagingOptions {
//        exclude 'META-INF/DEPENDENCIES.txt'
//        exclude 'META-INF/DEPENDENCIES'
//        exclude 'META-INF/dependencies.txt'
//        exclude 'META-INF/LICENSE.txt'
//        exclude 'META-INF/LICENSE'
//        exclude 'META-INF/license.txt'
//        exclude 'META-INF/LGPL2.1'
//        exclude 'META-INF/NOTICE.txt'
//        exclude 'META-INF/NOTICE'
//        exclude 'META-INF/notice.txt'
//        exclude 'META-INF/io.netty.versions.properties'
//        exclude 'META-INF/INDEX.LIST'
//
//        exclude 'project.properties'
//    }
}

protobuf {
    protoc { //pre-compiled protoc that we have published on Maven Central
        artifact = 'com.google.protobuf:protoc:3.4.0'
    }
    plugins {
        javalite {
            artifact = "com.google.protobuf:protoc-gen-javalite:3.0.0"
        }
        grpc {
            artifact = "io.grpc:protoc-gen-grpc-java:${grpcVersion}"
        }
    }
    generateProtoTasks {
        all().each { task ->
            task.plugins {
                javalite {}
                grpc {
//                     Options added to --grpc_out
                    option 'lite'
                }
            }
        }
    }
}

dependencies {
    compile fileTree(dir: 'libs', include: ['*.jar'])

    // Support libraries
    compile "com.android.support:design:$supportLibraryVersion"
    compile "com.android.support:cardview-v7:$supportLibraryVersion"
    compile "com.android.support:recyclerview-v7:$supportLibraryVersion"

//     gRPC
    compile "io.grpc:grpc-okhttp:$grpcVersion"
    compile "io.grpc:grpc-protobuf-lite:$grpcVersion"
    compile "io.grpc:grpc-stub:$grpcVersion"

//     OAuth2 for Google API
    compile('com.google.auth:google-auth-library-oauth2-http:0.7.0') {
        exclude module: 'httpclient'
    }

    // Tests

    compile 'javax.annotation:javax.annotation-api:1.2'
    compile 'com.android.support.constraint:constraint-layout:1.0.2'
    compile 'com.android.support:multidex:1.0.1'
    compile 'com.android.support:support-v4:25.3.1'
    compile 'io.realm:android-adapters:2.1.0'
    compile 'org.greenrobot:eventbus:3.0.0'
    compile 'com.github.clans:fab:1.6.4'

    testCompile 'junit:junit:4.12'
    androidTestCompile 'com.android.support.test:runner:0.5'
    androidTestCompile 'com.android.support.test.espresso:espresso-core:2.2.2'
    protobuf 'com.google.protobuf:protobuf-java:3.3.1'
    compile 'com.google.firebase:firebase-core:11.0.4'
    compile 'com.google.firebase:firebase-storage:11.0.4'
//    compile ('com.google.cloud:google-cloud-speech:0.26.0-alpha'){
////        exclude group: 'org.json'
////        exclude group: 'org.apache.httpcomponents'
////        exclude group: 'io.grpc', module: 'grpc-all'
////        exclude group: 'com.google.protobuf', module: 'protobuf-java'
////        exclude group: 'com.google.api-client', module: 'google-api-client-appengine'
//    }

//    compile 'com.google.cloud:google-cloud-storage:1.8.0'

}

task copySecretKey(type: Copy) {
    def File secretKey = file "$System.env.GOOGLE_APPLICATION_CREDENTIALS"
    from secretKey.getParent()
    include secretKey.getName()
    into 'src/main/res/raw'
    rename secretKey.getName(), "credential.json"
}
preBuild.dependsOn(copySecretKey)


//def buildNumber = System.getenv("GOOGLE_APPLICATION_CREDENTIALS")
//if (buildNumber == null) {
//    Properties properties = new Properties()
//    properties.load(project.rootProject.file('local.properties').newDataInputStream())
//    buildNumber = properties.getProperty('buildNumber')?:"NoBuildNumberFound"
//}
apply plugin: 'com.google.gms.google-services'